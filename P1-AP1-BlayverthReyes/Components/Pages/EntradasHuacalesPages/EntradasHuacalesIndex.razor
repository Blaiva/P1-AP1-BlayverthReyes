@page "/index"

@inject EntradasHuacalesService entradasHuacalesService
@inject NavigationManager navigationManager
@inject ToastService toastService

@rendermode InteractiveServer

<PageTitle>Entrada de Huacales</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header text-center">
			<h5 class="card-title">Entrada de Huacales</h5>
		</div>

		@*Body*@
		<div class="card-body">

			@*Labels*@
			<div class="row">
				<div class="col-2">
					<label class="col-form-label"><strong>Desde</strong></label>
				</div>

				<div class="col-3">
					<label class="col-form-label"><strong>Hasta</strong></label>
				</div>
			</div>

			@*Inputs*@
			<div class="row">
				<div class="col-2">
					<InputDate class="form-control" @bind-Value="FechaDesde"/>
				</div>

				<div class="col-3">
					<InputDate class="form-control w-75" @bind-Value="FechaHasta"/>
				</div>
			</div>

			@*Labels*@
			<div class="row">
				<div class="col-3">
					<label class="col-form-label"><strong>Filtar por</strong></label>
				</div>

				<div class="col-4">
					<label class="col-form-label"><strong>Buscar</strong></label>
				</div>
			</div>

			@*Inputs y buttons*@
			<div class="row align-items-center">
				<div class="col-3">
					<InputSelect class="form-select" @bind-value="Filtro">
						<option value="" selected disabled>Elige una opci&oacute;n</option>
						<option value="Cliente">Cliente</option>
						<option value="Cantidad">Cantidad</option>
						<option value="Precio">Precio</option>
					</InputSelect>
				</div>

				<div class="col-4">
					<div class="input-group">
						<input class="form-control" @bind="ValorFiltro" placeholder="Buscar" />
						<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><span class="bi bi-search"/></button>
						<button type="reset" class="btn btn-outline-secondary" @onclick="Restablecer"><span class="bi bi-arrow-counterclockwise" /></button>
					</div>
				</div>

				<div class="col-5">
					<a href="/create" class="btn btn-primary"><span class="bi bi-plus-square"/> Crear</a>
				</div>
			</div>

			@*Tabla*@
			<table class="table table-hover">
				@*Encabezados de la tabla*@
				<thead class="table table-striped text-black">
					<tr>
						<th>IdEntrada</th>
						<th>Fecha</th>
						<th>Cliente</th>
						<th>Cantidad</th>
						<th>Precio</th>
						<th>Importe</th>
						<th>Opciones</th>
					</tr>
				</thead>
				@*Datos de la tabla*@
				<tbody>
					@foreach(var entrada in ListaEntradas)
					{
						<tr>
							<td>@entrada.IdEntrada</td>
							<td>@entrada.Fecha.ToString("dd/MM/yyyy")</td>
							<td>@entrada.NombreCliente</td>
							<td>@entrada.Cantidad</td>
							<td>RD$@Math.Round(entrada.Importe, 2)</td>
							<td>RD$@Math.Round(entrada.Importe*entrada.Cantidad, 2)</td>

							<td>
								<a href="/edit/@entrada.IdEntrada" class="btn btn-outline-primary"><span class="bi bi-pencil"/></a>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>

		@*Footer*@
		<div class="card-footer">
			<div class="text-end">
				<label class="px-2"><strong>Cantidad: </strong>@ListaEntradas.Sum(e => e.Cantidad)</label>
				<label><strong>Total: </strong>RD$@Math.Round(ListaEntradas.Sum(e => e.Cantidad * e.Importe), 2)</label>
			</div>
		</div>
	</div>
</div>

@code {
	public List<EntradasHuacales> ListaEntradas { get; set; } = new List<EntradasHuacales>();

	public string Filtro { get; set; } = string.Empty;
	public string ValorFiltro { get; set; } = string.Empty;
	public DateTime? FechaDesde { get; set; } = null;
	public DateTime? FechaHasta { get; set; } = null;

	protected override async Task OnInitializedAsync()
	{
		ListaEntradas = await entradasHuacalesService.Listar(e=>e.IdEntrada > 0);
	}

	public async Task Buscar()
	{
		if(ValorFiltro.Trim() != "" || (FechaDesde.HasValue || FechaHasta.HasValue))
		{
			if (Filtro == "Cliente")
				ListaEntradas = await entradasHuacalesService.Listar(e => e.NombreCliente.ToLower().Contains(ValorFiltro.Trim().ToLower()));
			else if (Filtro == "Cantidad")
				ListaEntradas = await entradasHuacalesService.Listar(e => e.Cantidad.ToString().Contains(ValorFiltro.Trim()));
			else if (Filtro == "Precio")
				ListaEntradas = await entradasHuacalesService.Listar(e => e.Importe.ToString().Contains(ValorFiltro.Trim()));

			if(FechaDesde.HasValue && FechaHasta.HasValue)
				ListaEntradas = ListaEntradas.Where(e => e.Fecha >= FechaDesde && e.Fecha <= FechaHasta).ToList();
			else if (FechaDesde.HasValue)
				ListaEntradas = ListaEntradas.Where(e => e.Fecha >= FechaDesde).ToList();
			else if (FechaHasta.HasValue)
				ListaEntradas = ListaEntradas.Where(e => e.Fecha <= FechaHasta).ToList();
		}
		else
			ListaEntradas = await entradasHuacalesService.Listar(e => e.IdEntrada > 0);
	}

	public async Task Restablecer()
	{
		ListaEntradas = await entradasHuacalesService.Listar(e => e.IdEntrada > 0);
		ValorFiltro = string.Empty;
		Filtro = string.Empty;
		FechaDesde = null;
		FechaHasta = null;
	}
}
