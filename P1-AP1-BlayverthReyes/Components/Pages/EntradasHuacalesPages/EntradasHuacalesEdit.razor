@page "/edit/{idEntrada:int}"

@inject EntradasHuacalesService entradasHuacalesService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<PageTitle>Editar Entrada</PageTitle>

<Toasts class="p-3" AutoHide="true" Delay="5000" Placement="ToastsPlacement.TopRight" />

<EditForm Model="EntradaHuacal" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header text-center">
				<h5 class="card-title">Editar Entrada</h5>
			</div>

			@*Body*@
			<div class="card-body">
				<div class="mb-3">
					<label class="form-label"><strong>IdEntrada</strong></label>
					<InputNumber class="form-control" @bind-Value="EntradaHuacal.IdEntrada" readonly />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Fecha</strong></label>
					<InputDate class="form-control" @bind-Value="EntradaHuacal.Fecha" />
					<ValidationMessage For="@(() => EntradaHuacal.Fecha)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Nombre del Cliente</strong></label>
					<InputText class="form-control" @bind-Value="EntradaHuacal.NombreCliente" />
					<ValidationMessage For="@(() => EntradaHuacal.NombreCliente)" />
				</div>

				<div class="border border-success p-3 mt-3">
					<h5>Detalles de la Entrada</h5>

					<div class="col-auto input-group align-items-center">

						<label class="col-form-label input-group-text">Tipo:</label>
						<InputSelect class="form-control form-select" @bind-Value="Detalle.TipoId">
							<option disabled value="0">Seleccione un tipo de huacal</option>
							@foreach (var tipo in ListaTipos)
							{
								<option value="@tipo.TipoId">@tipo.Descripcion - @tipo.Existencia</option>
							}
						</InputSelect>

						<label class="col-form-label input-group-text">Cantidad:</label>
						<InputNumber class="form-control" id="quantity-input" @bind-Value="Detalle.Cantidad" />

						<label class="col-form-label input-group-text">Precio:</label>
						<InputNumber class="form-control" id="quantity-input" @bind-Value="Detalle.Precio" />

						<button type="button" class="btn btn-outline-success" @onclick="AgregarDetalle"><span class="bi bi-plus" /> Agregar</button>
					</div>

					<table class="table table-light">
						<thead class="table table-striped table-bordered">
							<tr class="text-center">
								<th>Tipo</th>
								<th>Cantidad</th>
								<th>Precio</th>
								<th>Importe</th>
								<th>Remover</th>
							</tr>
						</thead>
						<tbody>
							@foreach (var detalle in EntradaHuacal.EntradasHuacalesDetalle)
							{
								<tr class="text-center">
									<td>@ListaTipos.FirstOrDefault(t => t.TipoId == detalle.TipoId)?.Descripcion</td>
									<td>@detalle.Cantidad</td>
									<td>RD$@Math.Round(detalle.Precio, 2)</td>
									<td>RD$@Math.Round(detalle.Cantidad * detalle.Precio)</td>
									<td>
										<button type="button" class="btn btn-outline-danger" @onclick="() => RemoverDetalle(detalle)"><span class="bi bi-trash" /></button>
									</td>
								</tr>
							}
						</tbody>
					</table>
					<hr />
				</div>

				<div class="row">
					<div class="col-3 offset-6">
						<div class="mb-3">
							<label class="form-label"><strong>Cantidad</strong></label>
							<label class="form-control text-end"><strong>@EntradaHuacal.Cantidad</strong></label>
							<ValidationMessage For="@(() => EntradaHuacal.Cantidad)" />
						</div>
					</div>

					<div class="col-3">
						<div class="mb-3">
							<label class="form-label"><strong>Importe</strong></label>
							<label class="form-control text-end"><strong>RD$@Math.Round(EntradaHuacal.Importe, 2)</strong></label>
							<ValidationMessage For="@(() => EntradaHuacal.Importe)" />
						</div>
					</div>
				</div>

			</div>

			@*Footer*@
			<div class="card-footer text-center">
				<div class="btn-group">
					<a href="/index" class="btn btn-outline-secondary"><span class="bi bi-arrow-bar-left" /> Volver</a>
					@if(!modificado)
					{
						<button type="submit" class="btn btn-outline-success"><span class="bi bi-check-circle" /> Guardar</button>
						<button type="button" class="btn btn-outline-danger" @onclick="MostrarModal"><span class="bi bi-trash-fill"/> Eliminar</button>
					}
				</div>
			</div>
		</div>
	</div>
</EditForm>

@if (Eliminando)
{
	<div class="modal show" tabindex="-1" style="display: block;" aria-labelledby="confirmDeleteModalLabel" aria-hidden="false">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header text-center">
					<h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Eliminacion</h5>
					<button type="button" class="btn-close" aria-label="Close" @onclick="MostrarModal"></button>
				</div>
				<div class="modal-body">
					<p>¿Estas seguro?</p>
					<p><strong>EntradaId:</strong> @EntradaHuacal.IdEntrada</p>
					<p><strong>Nombre:</strong> @EntradaHuacal.NombreCliente</p>
					<p><strong>Cantidad:</strong> @EntradaHuacal.Cantidad</p>
					<p><strong>Precio:</strong> @EntradaHuacal.Importe</p>
					<p><strong>Fecha:</strong> @EntradaHuacal.Fecha.ToString("dd/MM/yyyy")</p>
				</div>
				<div class="modal-footer">
					<div class="btn-group">
						<button type="button" class="btn btn-outline-secondary" @onclick="MostrarModal"><span class="bi bi-arrow-bar-left" /> Volver</button>
						<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span class="bi bi-trash-fill" /> Eliminar</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int idEntrada { get; set; }

	public EntradasHuacales EntradaHuacal { get; set; } = new EntradasHuacales();
	public EntradasHuacalesDetalle Detalle = new();
	public List<TiposHuacales> ListaTipos { get; set; } = [];
	public bool Eliminando { get; set; } = false;
	public bool modificado { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		EntradaHuacal = await entradasHuacalesService.Buscar(idEntrada);
		ListaTipos = await entradasHuacalesService.ListarTipos();
	}

	private async Task AgregarDetalle()
	{
		EntradaHuacal.EntradasHuacalesDetalle.Add(Detalle);
		EntradaHuacal.Cantidad = EntradaHuacal.EntradasHuacalesDetalle.Sum(d => d.Cantidad);
		EntradaHuacal.Importe = EntradaHuacal.EntradasHuacalesDetalle.Sum(d => d.Cantidad * d.Precio);

		Detalle = new EntradasHuacalesDetalle();
		await Task.CompletedTask;
	}

	public void RemoverDetalle(EntradasHuacalesDetalle detalle)
	{
		EntradaHuacal.EntradasHuacalesDetalle.Remove(detalle);
		EntradaHuacal.Cantidad = EntradaHuacal.EntradasHuacalesDetalle.Sum(d => d.Cantidad);
		EntradaHuacal.Importe = EntradaHuacal.EntradasHuacalesDetalle.Sum(d => d.Cantidad * d.Precio);
	}

	public async Task Modificar()
	{
		modificado = await entradasHuacalesService.Guardar(EntradaHuacal);
		if (modificado)
			toastService.ShowSuccess("Entrada modificada correctamente");
		else
			toastService.ShowError("Error al modificar la Entrda");
	}

	public async Task Eliminar()
	{
		modificado = await entradasHuacalesService.Eliminar(idEntrada);
		if (modificado)
			toastService.ShowSuccess("Entrada eliminada correctamente");
		else
			toastService.ShowError("Error al eliminar la Entrada");
		MostrarModal();
	}

	public void MostrarModal()
	{
		Eliminando = !Eliminando;
	}
}
