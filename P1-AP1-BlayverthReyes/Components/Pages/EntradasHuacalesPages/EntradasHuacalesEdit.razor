@page "/edit/{idEntrada:int}"

@inject EntradasHuacalesService entradasHuacalesService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Editar Entrada</PageTitle>

<EditForm Model="EntradaHuacal" OnValidSubmit="Modificar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			@*Header*@
			<div class="card-header text-center">
				<h5 class="card-title">Editar Entrada</h5>
			</div>

			@*Body*@
			<div class="card-body">
				<div class="mb-3">
					<label class="form-label"><strong>IdEntrada</strong></label>
					<InputNumber class="form-control" @bind-Value="EntradaHuacal.IdEntrada" readonly />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Fecha</strong></label>
					<InputDate class="form-control" @bind-Value="EntradaHuacal.Fecha" />
					<ValidationMessage For="@(() => EntradaHuacal.Fecha)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Nombre del Cliente</strong></label>
					<InputText class="form-control" @bind-Value="EntradaHuacal.NombreCliente" />
					<ValidationMessage For="@(() => EntradaHuacal.NombreCliente)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Cantidad</strong></label>
					<InputNumber class="form-control" @bind-Value="EntradaHuacal.Cantidad"/>
					<ValidationMessage For="@(() => EntradaHuacal.Cantidad)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Precio</strong></label>
					<InputNumber class="form-control" @bind-Value="EntradaHuacal.Precio"/>
					<ValidationMessage For="@(() => EntradaHuacal.Precio)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Importe</strong></label>
					<input type="number" class="form-control" value="@(EntradaHuacal.Cantidad*EntradaHuacal.Precio)" readonly/>
				</div>

				@if (!string.IsNullOrEmpty(AlertMessage))
				{
					<div class="alert alert-@AlertType alert-dismissible fade show" role="alert">
						<div>@AlertMessage</div>
					</div>
				}
			</div>

			@*Footer*@
			<div class="card-footer text-center">
				<div class="btn-group">
					<a href="/index" class="btn btn-outline-secondary"><span class="bi bi-arrow-bar-left" /> Volver</a>
					@if(AlertType != "success")
					{
						<button type="submit" class="btn btn-outline-success"><span class="bi bi-check-circle" /> Guardar</button>
						<button type="button" class="btn btn-outline-danger" @onclick="MostrarModal"><span class="bi bi-trash-fill"/> Eliminar</button>
					}
				</div>
			</div>
		</div>
	</div>
</EditForm>

@if (Eliminando)
{
	<div class="modal show" tabindex="-1" style="display: block;" aria-labelledby="confirmDeleteModalLabel" aria-hidden="false">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header text-center">
					<h5 class="modal-title" id="confirmDeleteModalLabel">Confirmar Eliminacion</h5>
					<button type="button" class="btn-close" aria-label="Close" @onclick="MostrarModal"></button>
				</div>
				<div class="modal-body">
					<p>¿Estas seguro?</p>
					<p><strong>EntradaId:</strong> @EntradaHuacal.IdEntrada</p>
					<p><strong>Nombre:</strong> @EntradaHuacal.NombreCliente</p>
					<p><strong>Cantidad:</strong> @EntradaHuacal.Cantidad</p>
					<p><strong>Precio:</strong> @EntradaHuacal.Precio</p>
					<p><strong>Fecha:</strong> @EntradaHuacal.Fecha.ToString("dd/MM/yyyy")</p>
				</div>
				<div class="modal-footer">
					<div class="btn-group">
						<button type="button" class="btn btn-outline-secondary" @onclick="MostrarModal"><span class="bi bi-arrow-bar-left" /> Volver</button>
						<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><span class="bi bi-trash-fill" /> Eliminar</button>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public int idEntrada { get; set; }

	public EntradasHuacales EntradaHuacal { get; set; } = new EntradasHuacales();
	public bool Eliminando { get; set; } = false;
	public string AlertMessage { get; set; }
	public string AlertType { get; set; }

	protected override async Task OnInitializedAsync()
	{
		EntradaHuacal = await entradasHuacalesService.Buscar(idEntrada);
	}

	public async Task Modificar()
	{
		var modificado = await entradasHuacalesService.Guardar(EntradaHuacal);
		if (modificado)
		{
			AlertMessage = "Entrada modificada correctamente.";
			AlertType = "success";
		}
		else
		{
			AlertMessage = "Error al modificar la Entrada.";
			AlertType = "danger";
		}
	}

	public async Task Eliminar()
	{
		var eliminado = await entradasHuacalesService.Eliminar(idEntrada);
		if (eliminado)
		{
			AlertMessage = "Entrada eliminada correctamente.";
			AlertType = "success";
		}
		else
		{
			AlertMessage = "Error al eliminar la Entrada.";
			AlertType = "danger";
		}
		MostrarModal();
	}

	public void MostrarModal()
	{
		Eliminando = !Eliminando;
	}
}
